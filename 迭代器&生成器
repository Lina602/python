一、迭代器
    迭代器是一个可以记住遍历位置的对象
    迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问结束，迭代器只能往前，不能往后
    迭代器两个基本的方法：iter()和next()
    例：
        list = [1, 2, 3, 4]
        it = iter(list)
        print(next(it))
        到最后没有元素时会抛出异常

        用for...in...避免抛出异常
        for item in it:
            print(x)

    创建一个迭代器
        把一个类作为一个迭代器使用需要在类中实现__iter__() 和 __next__().
        例：
            Class Mynumbers:
                def __iter__(self):
                    self.a = 1
                    return self

                def __next__(self):
                    if self.a <= 20:
                        x = self.a
                        self.a += 1
                        return x
                    else:
                        raise StopIteration
            mynumber = Mynumbers()
            it = iter(mynumer)
            for i in it:
                print(i)

二：生成器
    使用了yield的函数被称为生成器
    生成器是一个返回迭代器的函数，只能用于迭代操作。
    在调用生成器运行的过程中，每次遇到yield的函数会暂停并保存当前所有的运行信息，返回yield的值，并在下一次运行next()方法时从当前位置继续运行，
    调用一个生成器函数，返回的是一个迭代器对象
    例:实现斐波那契列
       def fibonaci(n):
           a, b, counter = 0, 1, 0
           while True:
                if (counter > n):
                    return
                yield a
                a, b = b, a+b
                counter += 1

       f = fibonaci(10)
       for i in f:
            print(i)
